<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><head><title>NetworkManager Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/StyleUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/ElementCollection.js"> </script><script type="text/javascript" src="../scripts/MemberFilter.js"> </script><script type="text/javascript" src="../scripts/CollapsibleSection.js"> </script><script type="text/javascript" src="../scripts/LanguageFilter.js"> </script><script type="text/javascript" src="../scripts/CookieDataStore.js"> </script><meta name="file" content="T_OpenMetaverse_NetworkManager" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="T:OpenMetaverse.NetworkManager" /><MSHelp:Keyword Index="A" Term="T:OpenMetaverse.NetworkManager" /><MSHelp:Keyword Index="A" Term="frlrfOpenMetaverseNetworkManagerClassTopic" /><MSHelp:Keyword Index="A" Term="frlrfOpenMetaverseNetworkManagerMembersTopic" /><MSHelp:Keyword Index="K" Term="NetworkManager class" /><MSHelp:Keyword Index="K" Term="OpenMetaverse.NetworkManager class" /><MSHelp:Keyword Index="F" Term="NetworkManager" /><MSHelp:Keyword Index="F" Term="OpenMetaverse.NetworkManager" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="OpenMetaverse.dll" /><MSHelp:Attr Name="APIName" Value=".NetworkManager" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="NetworkManager is responsible for managing the network layer of OpenMetaverse. It tracks all the server connections, serializes outgoing traffic and deserializes incoming traffic, and provides instances of delegates for network-related events." /></xml></head><body><script type="text/javascript">var store = new CookieDataStore('docs');registerEventHandler(window, 'load', function() { var ss = new SplitScreen('control', 'main'); selectLanguage(store.get('lang')); });</script><div id="control"><span class="productTitle">OpenMetaverse Library API Documentation</span><br /><span class="topicTitle">NetworkManager Class</span><br /><div id="toolbar"><span id="chickenFeet"><a href="R_Project.htm">Namespaces</a> ► <a href="N_OpenMetaverse.htm">OpenMetaverse</a> ► <span class="selflink">NetworkManager</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs">C#</option><option value="VisualBasic vb">Visual Basic</option><option value="ManagedCPlusPlus cpp">Visual C++</option></select></span><script>var sd = getStyleDictionary(); var lfc = new LanguageFilterController();</script></div></div><div id="main"><span style="color: DarkGray"> </span><div class="summary">
            NetworkManager is responsible for managing the network layer of 
            OpenMetaverse. It tracks all the server connections, serializes 
            outgoing traffic and deserializes incoming traffic, and provides
            instances of delegates for network-related events.
            </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Declaration Syntax</div><div class="sectionContent"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="st.toggleClass('x-lang','CSharp','activeTab','tab'); sb.toggleStyle('x-lang','CSharp','display','block','none');">C#</td><td class="tab" x-lang="VisualBasic" onclick="st.toggleClass('x-lang','VisualBasic','activeTab','tab'); sb.toggleStyle('x-lang','VisualBasic','display','block','none');">Visual Basic</td><td class="tab" x-lang="ManagedCPlusPlus" onclick="st.toggleClass('x-lang','ManagedCPlusPlus','activeTab','tab'); sb.toggleStyle('x-lang','ManagedCPlusPlus','display','block','none');">Visual C++</td></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">NetworkManager</span></pre></div><div class="code" x-lang="VisualBasic"><pre><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">NetworkManager</span></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">NetworkManager</span></pre></div></div><script type="text/javascript">
						var st = new ElementCollection('syntaxTabs');
						var sb = new ElementCollection('syntaxBlocks');
						lfc.registerTabbedArea(st, sb);
						st.toggleClass('x-lang','CSharp','activeTab','tab');
						sb.toggleStyle('x-lang','CSharp','display','block','none');
					</script></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Members</div><div class="sectionContent"><table class="filter"><tr class="tabs" id="memberTabs"><td class="tab" value="all" onclick="mt.toggleClass('value','all','activeTab','tab'); mf.subgroup='all'; ms.process(getInstanceDelegate(mf,'filterElement'));">All Members</td><td class="tab" value="constructor" onclick="mt.toggleClass('value','constructor','activeTab','tab'); mf.subgroup='constructor'; ms.process(getInstanceDelegate(mf,'filterElement'));">Constructors</td><td class="tab" value="method" onclick="mt.toggleClass('value','method','activeTab','tab'); mf.subgroup='method'; ms.process(getInstanceDelegate(mf,'filterElement'));">Methods</td><td class="tab" value="property" onclick="mt.toggleClass('value','property','activeTab','tab'); mf.subgroup='property'; ms.process(getInstanceDelegate(mf,'filterElement'));">Properties</td><td class="tab" value="field" onclick="mt.toggleClass('value','field','activeTab','tab'); mf.subgroup='field'; ms.process(getInstanceDelegate(mf,'filterElement'));">Fields</td><td class="tab" value="event" onclick="mt.toggleClass('value','event','activeTab','tab'); mf.subgroup='event'; ms.process(getInstanceDelegate(mf,'filterElement'));">Events</td></tr><tr><td class="line" colspan="2"><label for="public"><input id="public" type="checkbox" checked="true" onclick="mf['public'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Public</label><br /><label for="protected"><input id="protected" type="checkbox" checked="true" onclick="mf['protected'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Protected</label></td><td class="line" colspan="2"><label for="instance"><input id="instance" type="checkbox" checked="true" onclick="mf['instance'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Instance</label><br /><label for="static"><input id="static" type="checkbox" checked="true" onclick="mf['static'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Static</label></td><td class="line" colspan="2"><label for="declared"><input id="declared" type="checkbox" checked="true" onclick="mf['declared'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Declared</label><br /><label for="inherited"><input id="inherited" type="checkbox" checked="true" onclick="mf['inherited'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Inherited</label></td></tr></table><table class="members" id="memberList"><tr><th class="iconColumn">Icon</th><th class="nameColumn">Member</th><th class="descriptionColumn">Description</th></tr><tr data="constructor; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager__ctor.htm">NetworkManager(GridClient)</a></td><td><div class="summary">
            Default constructor
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_BeginLogin.htm">BeginLogin(LoginParams)</a></td><td><br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_NetworkManager_CircuitCode.htm">CircuitCode</a></td><td><div class="summary">Uniquely identifier associated with our connections to
            simulators</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_Connect.htm">Connect(IPAddress, UInt16, UInt64, Boolean, String)</a></td><td><div class="summary">
            Connect to a simulator
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_Connect_1.htm">Connect(IPEndPoint, UInt64, Boolean, String)</a></td><td><div class="summary">
            Connect to a simulator
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_NetworkManager_Connected.htm">Connected</a></td><td><div class="summary">
            Shows whether the network layer is logged in to the grid or not
            </div><br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_NetworkManager_CurrentSim.htm">CurrentSim</a></td><td><div class="summary">The simulator that the logged in avatar is currently 
            occupying</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_DefaultLoginParams.htm">DefaultLoginParams(String, String, String, String, String)</a></td><td><div class="summary">
      </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_DisconnectSim.htm">DisconnectSim(Simulator, Boolean)</a></td><td><div class="summary">
      </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/bsc2ak47" target="_blank">Equals(Object)</a></td><td><div class="summary">Determines whether the specified <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a> is equal to the current <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/4k87zsw7" target="_blank">Finalize<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Allows an <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a> to attempt to free resources and perform other cleanup operations before the <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a> is reclaimed by garbage collection.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_FindSimulator.htm">FindSimulator(IPEndPoint)</a></td><td><div class="summary">
            Searches through the list of currently connected simulators to find
            one attached to the given IPEndPoint
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/zdee4b3y" target="_blank">GetHashCode<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/dfwy45w9" target="_blank">GetType<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_NetworkManager_InboxCount.htm">InboxCount</a></td><td><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_Login_1.htm">Login(String, String, String, String, String)</a></td><td><div class="summary">
            Simplified login that takes the most common and required fields
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_Login_2.htm">Login(String, String, String, String, String, String)</a></td><td><div class="summary">
            Simplified login that takes the most common fields along with a
            starting location URI, and can accept an MD5 string instead of a
            plaintext password
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_Login.htm">Login(LoginParams)</a></td><td><div class="summary">
            Login that takes a struct of all the values that will be passed to
            the login server
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_NetworkManager_LoginErrorKey.htm">LoginErrorKey</a></td><td><div class="summary">Upon login failure, contains a short string key for the
            type of login error that occurred</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_NetworkManager_LoginMessage.htm">LoginMessage</a></td><td><div class="summary">During login this contains a descriptive version of 
            LoginStatusCode. After a successful login this will contain the 
            message of the day, and after a failed login a descriptive error 
            message will be returned</div><br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_NetworkManager_LoginSeedCapability.htm">LoginSeedCapability</a></td><td><div class="summary">Seed CAPS URL returned from the login server</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_NetworkManager_LoginStatusCode.htm">LoginStatusCode</a></td><td><div class="summary">Current state of logging in</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_Logout.htm">Logout<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Initiate a blocking logout request. This will return when the logout
            handshake has completed or when <div class="code"><pre>Settings.LOGOUT_TIMEOUT</pre></div>
            has expired and the network layer is manually shut down
            </div><br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/57ctke0a" target="_blank">MemberwiseClone<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnConnected.htm">OnConnected</a></td><td><div class="summary">
            Event raised when the client was able to connected successfully.
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnCurrentSimChanged.htm">OnCurrentSimChanged</a></td><td><div class="summary">
            An event for when CurrentSim changes
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnDisconnected.htm">OnDisconnected</a></td><td><div class="summary">
            An event for being logged out either through client request, server
            forced, or network error
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnEventQueueRunning.htm">OnEventQueueRunning</a></td><td><div class="summary">
            Triggered when an event queue makes the initial connection
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnLogin.htm">OnLogin</a></td><td><div class="summary">Called any time the login status changes, will eventually
            return LoginStatus.Success or LoginStatus.Failure</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnLogoutReply.htm">OnLogoutReply</a></td><td><div class="summary">
            Event raised when a logout is confirmed by the simulator
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnSimConnected.htm">OnSimConnected</a></td><td><div class="summary">
            Event raised when a connection to a simulator is established
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnSimConnecting.htm">OnSimConnecting</a></td><td><div class="summary">
            Event raised when a before a connection to a simulator is 
            initialized
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_NetworkManager_OnSimDisconnected.htm">OnSimDisconnected</a></td><td><div class="summary">
            An event for the connection to a simulator other than the currently
            occupied one disconnecting
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_NetworkManager_RawLoginReply.htm">RawLoginReply</a></td><td><div class="summary">The raw XML-RPC reply from the login server, exactly as it
            was received (minus the HTTP header)</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_RegisterCallback.htm">RegisterCallback(PacketType, NetworkManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>PacketCallback)</a></td><td><div class="summary">
            Register an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not
            supported in the library
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_RegisterEventCallback.htm">RegisterEventCallback(String, Caps<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>EventQueueCallback)</a></td><td><div class="summary">
            Register a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            the library
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_RegisterLoginResponseCallback.htm">RegisterLoginResponseCallback(NetworkManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>LoginResponseCallback)</a></td><td><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_RegisterLoginResponseCallback_1.htm">RegisterLoginResponseCallback(NetworkManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>LoginResponseCallback, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>String<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_RequestLogout.htm">RequestLogout<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Initiate the logout process. Check if logout succeeded with the
            <div class="code"><pre>OnLogoutReply</pre></div> event, and if this does not fire the
            <div class="code"><pre>Shutdown()</pre></div> function needs to be manually called
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_SendPacket.htm">SendPacket(Packet)</a></td><td><div class="summary">
            Send a packet to the simulator the avatar is currently occupying
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_SendPacket_1.htm">SendPacket(Packet, Simulator)</a></td><td><div class="summary">
            Send a packet to a specified simulator
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_SendPacket_3.htm">SendPacket(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Boolean)</a></td><td><div class="summary">
            Send a raw byte array as a packet to the current simulator
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_SendPacket_2.htm">SendPacket(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Simulator, Boolean)</a></td><td><div class="summary">
            Send a raw byte array as a packet to the specified simulator
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_Shutdown.htm">Shutdown(NetworkManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>DisconnectType)</a></td><td><div class="summary">
            Shutdown will disconnect all the sims except for the current sim
            first, and then kill the connection to CurrentSim. This should only
            be called if the logout process times out on <div class="code"><pre>RequestLogout</pre></div></div><br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_NetworkManager_Simulators.htm">Simulators</a></td><td><div class="summary">All of the simulators we are currently connected to</div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="M_OpenMetaverse_NetworkManager_StartLocation.htm">StartLocation(String, Int32, Int32, Int32)</a></td><td><div class="summary">
            Build a start location URI for passing to the Login function
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/7bxwbwt2" target="_blank">ToString<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Returns a <a href="http://msdn2.microsoft.com/en-us/s1wwdcbf" target="_blank">String</a> that represents the current <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_UnregisterCallback.htm">UnregisterCallback(PacketType, NetworkManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>PacketCallback)</a></td><td><div class="summary">
            Unregister an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not 
            supported in the library
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_UnregisterEventCallback.htm">UnregisterEventCallback(String, Caps<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>EventQueueCallback)</a></td><td><div class="summary">
            Unregister a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            the library
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_NetworkManager_UnregisterLoginResponseCallback.htm">UnregisterLoginResponseCallback(NetworkManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>LoginResponseCallback)</a></td><td><br /></td></tr></table><script type="text/javascript">
					var mt = new ElementCollection('memberTabs');
					var ms = new ElementCollection('memberList');
					var mf = new MemberFilter();
					mt.toggleClass('value','all','activeTab','tab');
				</script></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Inheritance Hierarchy</div><div class="sectionContent"><table cellspacing="0" cellpadding="0"><tr><td colspan="2"><a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a></td></tr><tr><td><img src="../icons/LastChild.gif" /></td><td><span class="selflink">NetworkManager</span></td></tr></table></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:contact%40libsecondlife.org?Subject=OpenMetaverse Library API Documentation">The OpenMetaverse Ninjas</a>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> <p /><a href="http://www.libsecondlife.org/wiki/libsecondlife:License">License</a></div>Assembly: <span data="assembly">OpenMetaverse</span> (Module: OpenMetaverse) Version: 1.0.0.0</p></div></body></html>