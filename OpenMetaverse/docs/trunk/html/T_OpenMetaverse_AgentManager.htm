<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><head><title>AgentManager Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/StyleUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/ElementCollection.js"> </script><script type="text/javascript" src="../scripts/MemberFilter.js"> </script><script type="text/javascript" src="../scripts/CollapsibleSection.js"> </script><script type="text/javascript" src="../scripts/LanguageFilter.js"> </script><script type="text/javascript" src="../scripts/CookieDataStore.js"> </script><meta name="file" content="T_OpenMetaverse_AgentManager" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="T:OpenMetaverse.AgentManager" /><MSHelp:Keyword Index="A" Term="T:OpenMetaverse.AgentManager" /><MSHelp:Keyword Index="A" Term="frlrfOpenMetaverseAgentManagerClassTopic" /><MSHelp:Keyword Index="A" Term="frlrfOpenMetaverseAgentManagerMembersTopic" /><MSHelp:Keyword Index="K" Term="AgentManager class" /><MSHelp:Keyword Index="K" Term="OpenMetaverse.AgentManager class" /><MSHelp:Keyword Index="F" Term="AgentManager" /><MSHelp:Keyword Index="F" Term="OpenMetaverse.AgentManager" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="OpenMetaverse.dll" /><MSHelp:Attr Name="APIName" Value=".AgentManager" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="Manager class for our own avatar" /></xml></head><body><script type="text/javascript">var store = new CookieDataStore('docs');registerEventHandler(window, 'load', function() { var ss = new SplitScreen('control', 'main'); selectLanguage(store.get('lang')); });</script><div id="control"><span class="productTitle">OpenMetaverse Library API Documentation</span><br /><span class="topicTitle">AgentManager Class</span><br /><div id="toolbar"><span id="chickenFeet"><a href="R_Project.htm">Namespaces</a> ► <a href="N_OpenMetaverse.htm">OpenMetaverse</a> ► <span class="selflink">AgentManager</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs">C#</option><option value="VisualBasic vb">Visual Basic</option><option value="ManagedCPlusPlus cpp">Visual C++</option></select></span><script>var sd = getStyleDictionary(); var lfc = new LanguageFilterController();</script></div></div><div id="main"><span style="color: DarkGray"> </span><div class="summary">
            Manager class for our own avatar
            </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Declaration Syntax</div><div class="sectionContent"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="st.toggleClass('x-lang','CSharp','activeTab','tab'); sb.toggleStyle('x-lang','CSharp','display','block','none');">C#</td><td class="tab" x-lang="VisualBasic" onclick="st.toggleClass('x-lang','VisualBasic','activeTab','tab'); sb.toggleStyle('x-lang','VisualBasic','display','block','none');">Visual Basic</td><td class="tab" x-lang="ManagedCPlusPlus" onclick="st.toggleClass('x-lang','ManagedCPlusPlus','activeTab','tab'); sb.toggleStyle('x-lang','ManagedCPlusPlus','display','block','none');">Visual C++</td></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">AgentManager</span></pre></div><div class="code" x-lang="VisualBasic"><pre><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">AgentManager</span></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">AgentManager</span></pre></div></div><script type="text/javascript">
						var st = new ElementCollection('syntaxTabs');
						var sb = new ElementCollection('syntaxBlocks');
						lfc.registerTabbedArea(st, sb);
						st.toggleClass('x-lang','CSharp','activeTab','tab');
						sb.toggleStyle('x-lang','CSharp','display','block','none');
					</script></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Members</div><div class="sectionContent"><table class="filter"><tr class="tabs" id="memberTabs"><td class="tab" value="all" onclick="mt.toggleClass('value','all','activeTab','tab'); mf.subgroup='all'; ms.process(getInstanceDelegate(mf,'filterElement'));">All Members</td><td class="tab" value="constructor" onclick="mt.toggleClass('value','constructor','activeTab','tab'); mf.subgroup='constructor'; ms.process(getInstanceDelegate(mf,'filterElement'));">Constructors</td><td class="tab" value="method" onclick="mt.toggleClass('value','method','activeTab','tab'); mf.subgroup='method'; ms.process(getInstanceDelegate(mf,'filterElement'));">Methods</td><td class="tab" value="property" onclick="mt.toggleClass('value','property','activeTab','tab'); mf.subgroup='property'; ms.process(getInstanceDelegate(mf,'filterElement'));">Properties</td><td class="tab" value="field" onclick="mt.toggleClass('value','field','activeTab','tab'); mf.subgroup='field'; ms.process(getInstanceDelegate(mf,'filterElement'));">Fields</td><td class="tab" value="event" onclick="mt.toggleClass('value','event','activeTab','tab'); mf.subgroup='event'; ms.process(getInstanceDelegate(mf,'filterElement'));">Events</td></tr><tr><td class="line" colspan="2"><label for="public"><input id="public" type="checkbox" checked="true" onclick="mf['public'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Public</label><br /><label for="protected"><input id="protected" type="checkbox" checked="true" onclick="mf['protected'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Protected</label></td><td class="line" colspan="2"><label for="instance"><input id="instance" type="checkbox" checked="true" onclick="mf['instance'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Instance</label><br /><label for="static"><input id="static" type="checkbox" checked="true" onclick="mf['static'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Static</label></td><td class="line" colspan="2"><label for="declared"><input id="declared" type="checkbox" checked="true" onclick="mf['declared'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Declared</label><br /><label for="inherited"><input id="inherited" type="checkbox" checked="true" onclick="mf['inherited'] = this.checked; ms.process(getInstanceDelegate(mf,'filterElement'));" />Inherited</label></td></tr></table><table class="members" id="memberList"><tr><th class="iconColumn">Icon</th><th class="nameColumn">Member</th><th class="descriptionColumn">Description</th></tr><tr data="constructor; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager__ctor.htm">AgentManager(GridClient)</a></td><td><div class="summary">
            Constructor, setup callbacks for packets related to our avatar
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_Acceleration.htm">Acceleration</a></td><td><div class="summary">An <a href="T_OpenMetaverse_LLVector3.htm">LLVector3</a> representing the acceleration of our agent</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_ActiveGroup.htm">ActiveGroup</a></td><td><div class="summary">Gets the <a href="T_OpenMetaverse_LLUUID.htm">LLUUID</a> of the agents active group.</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_AgentAccess.htm">AgentAccess</a></td><td><div class="summary">The access level of this agent, usually M or PG</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_AgentID.htm">AgentID</a></td><td><div class="summary">Your (client) avatars <a href="T_OpenMetaverse_LLUUID.htm">LLUUID</a></div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_AngularVelocity.htm">AngularVelocity</a></td><td><div class="summary">
      </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Animate.htm">Animate(Dictionary<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>LLUUID, Boolean<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>, Boolean)</a></td><td><div class="summary">
            Send an AgentAnimation packet that will toggle animations on or off
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_AnimationStart.htm">AnimationStart(LLUUID, Boolean)</a></td><td><div class="summary">
            Send an AgentAnimation packet that toggles a single animation on
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_AnimationStop.htm">AnimationStop(LLUUID, Boolean)</a></td><td><div class="summary">
            Send an AgentAnimation packet that toggles a single animation off
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_AutoPilot.htm">AutoPilot(Double, Double, Double)</a></td><td><div class="summary">
            Use the autopilot sim function to move the avatar to a new
            position. Uses double precision to get precise movements
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_AutoPilot_1.htm">AutoPilot(UInt64, UInt64, Single)</a></td><td><div class="summary">
            Use the autopilot sim function to move the avatar to a new position
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_AutoPilotCancel.htm">AutoPilotCancel<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Macro to cancel autopilot sim function</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_AutoPilotLocal.htm">AutoPilotLocal(Int32, Int32, Single)</a></td><td><div class="summary">
            Use the autopilot sim function to move the avatar to a new position
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_Balance.htm">Balance</a></td><td><div class="summary">Gets the current balance of the agent</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_BeamEffect.htm">BeamEffect(LLUUID, LLUUID, LLVector3d, LLColor, Single, LLUUID)</a></td><td><div class="summary">
            Create a particle beam between an avatar and an primitive
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Chat.htm">Chat(String, Int32, ChatType)</a></td><td><div class="summary">
            Send a chat message
            </div><br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_AgentManager_Client.htm">Client</a></td><td><div class="summary">Reference to the GridClient object</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_CollisionPlane.htm">CollisionPlane</a></td><td><div class="summary">
      </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_CompleteAgentMovement.htm">CompleteAgentMovement(Simulator)</a></td><td><div class="summary">
            Move an agent in to a simulator. This packet is the last packet
            needed to complete the transition in to a new simulator
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Crouch.htm">Crouch(Boolean)</a></td><td><div class="summary">
            Starts or stops crouching
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_DeGrab.htm">DeGrab(UInt32)</a></td><td><div class="summary">
            Releases a grabbed object
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/bsc2ak47" target="_blank">Equals(Object)</a></td><td><div class="summary">Determines whether the specified <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a> is equal to the current <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/4k87zsw7" target="_blank">Finalize<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Allows an <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a> to attempt to free resources and perform other cleanup operations before the <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a> is reclaimed by garbage collection.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_FirstName.htm">FirstName</a></td><td><div class="summary">Avatar First Name (i.e. Philip)</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Fly.htm">Fly(Boolean)</a></td><td><div class="summary">
            Starts or stops flying
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/zdee4b3y" target="_blank">GetHashCode<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/dfwy45w9" target="_blank">GetType<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GiveAvatarMoney.htm">GiveAvatarMoney(LLUUID, Int32)</a></td><td><div class="summary">
            Give Money to destination Avatar
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GiveAvatarMoney_1.htm">GiveAvatarMoney(LLUUID, Int32, String)</a></td><td><div class="summary">
            Give Money to destination Avatar
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GiveGroupMoney.htm">GiveGroupMoney(LLUUID, Int32)</a></td><td><div class="summary">
            Give L$ to a group
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GiveGroupMoney_1.htm">GiveGroupMoney(LLUUID, Int32, String)</a></td><td><div class="summary">
            Give L$ to a group
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GiveMoney.htm">GiveMoney(LLUUID, Int32, String, MoneyTransactionType, TransactionFlags)</a></td><td><div class="summary">
            Give Money to destionation Object or Avatar
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GiveObjectMoney.htm">GiveObjectMoney(LLUUID, Int32, String)</a></td><td><div class="summary">
            Give L$ to an object
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_GlobalPosition.htm">GlobalPosition</a></td><td><div class="summary">Returns the global grid position of the avatar</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GoHome.htm">GoHome<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Teleports agent to their stored home location
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Grab.htm">Grab(UInt32)</a></td><td><div class="summary">
            Grabs an object
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GrabUpdate.htm">GrabUpdate(LLUUID, LLVector3)</a></td><td><div class="summary">
            Drags on an object
            </div><br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_AgentManager_GroupChatSessions.htm">GroupChatSessions</a></td><td><div class="summary">
            Dictionary containing current Group Chat sessions and members
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_GroupInviteRespond.htm">GroupInviteRespond(LLUUID, LLUUID, Boolean)</a></td><td><div class="summary">
            Respond to a group invitation by either accepting or denying it
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_Health.htm">Health</a></td><td><div class="summary">Gets the health of the agent</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_HomeLookAt.htm">HomeLookAt</a></td><td><div class="summary">LookAt point saved/restored with HomePosition</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_HomePosition.htm">HomePosition</a></td><td><div class="summary">Position avatar client will goto when login to 'home' or during
            teleport request to 'home' region.</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_InstantMessage.htm">InstantMessage(LLUUID, String)</a></td><td><div class="summary">
            Send an Instant Message
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_InstantMessage_1.htm">InstantMessage(LLUUID, String, LLUUID)</a></td><td><div class="summary">
            Send an Instant Message
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_InstantMessage_3.htm">InstantMessage(String, LLUUID, String, LLUUID, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>LLUUID<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><div class="summary">
            Send an Instant Message
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_InstantMessage_2.htm">InstantMessage(String, LLUUID, String, LLUUID, InstantMessageDialog, InstantMessageOnline, LLVector3, LLUUID, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><div class="summary">
            Send an Instant Message
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_InstantMessageGroup.htm">InstantMessageGroup(LLUUID, String)</a></td><td><div class="summary">
            Send an Instant Message to a group
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_InstantMessageGroup_1.htm">InstantMessageGroup(String, LLUUID, String)</a></td><td><div class="summary">
            Send an Instant Message to a group
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Jump.htm">Jump<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Starts a jump (begin holding the jump key)
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_LastName.htm">LastName</a></td><td><div class="summary">Avatar Last Name (i.e. Linden)</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_LocalID.htm">LocalID</a></td><td><div class="summary">Your (client) avatar ID, local to the current region/sim</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_LookAtEffect.htm">LookAtEffect(LLUUID, LLUUID, LLVector3d, LookAtType, LLUUID)</a></td><td><div class="summary">
            Start a particle stream between an agent and an object
            </div><br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/57ctke0a" target="_blank">MemberwiseClone<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_AgentManager_Movement.htm">Movement</a></td><td><div class="summary">Used for movement and camera tracking</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_Name.htm">Name</a></td><td><div class="summary">Avatar Full Name (i.e. Philip Linden)</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnAgentDataUpdated.htm">OnAgentDataUpdated</a></td><td><div class="summary">Callback for agent data updates, such as the active
            group changing</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnAlertMessage.htm">OnAlertMessage</a></td><td><div class="summary">Alert messages sent to client from simulator</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnAnimationsChanged.htm">OnAnimationsChanged</a></td><td><div class="summary">Callback for the current agent animations changing</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnAvatarSitResponse.htm">OnAvatarSitResponse</a></td><td><div class="summary">Fired in response to a sit request</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnBalanceUpdated.htm">OnBalanceUpdated</a></td><td><div class="summary">Callback for incoming change in L$ balance</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnCameraConstraint.htm">OnCameraConstraint</a></td><td><div class="summary">Fired when our avatar camera reaches the maximum possible point</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnChat.htm">OnChat</a></td><td><div class="summary">Callback for incoming chat packets</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnGroupChatJoin.htm">OnGroupChatJoin</a></td><td><div class="summary">Callback for when agent is confirmed joined group chat session.</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnGroupChatLeft.htm">OnGroupChatLeft</a></td><td><div class="summary">Callback for when agent is confirmed to have left group chat session.</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnInstantMessage.htm">OnInstantMessage</a></td><td><div class="summary">Callback for incoming IMs</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnLoadURL.htm">OnLoadURL</a></td><td><div class="summary">Callback for URL popups</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnMeanCollision.htm">OnMeanCollision</a></td><td><div class="summary">Callback for an object or avatar forcefully colliding
            with the agent</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnMoneyBalanceReplyReceived.htm">OnMoneyBalanceReplyReceived</a></td><td><div class="summary">Callback for incoming Money Balance Replies</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnRegionCrossed.htm">OnRegionCrossed</a></td><td><div class="summary">Callback for the agent moving in to a neighboring sim</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnScriptControlChange.htm">OnScriptControlChange</a></td><td><div class="summary">Fired when a script wants to take or release control of your avatar.</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnScriptDialog.htm">OnScriptDialog</a></td><td><div class="summary">Callback for pop-up dialogs from scripts</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnScriptQuestion.htm">OnScriptQuestion</a></td><td><div class="summary">Callback for pop-up dialogs regarding permissions</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnScriptSensorReply.htm">OnScriptSensorReply</a></td><td><div class="summary">Fired when a script sensor reply is received</div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="E_OpenMetaverse_AgentManager_OnTeleport.htm">OnTeleport</a></td><td><div class="summary">Callback for Teleport request update</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_PayUploadFee.htm">PayUploadFee<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Pay texture/animation upload fee
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_PayUploadFee_1.htm">PayUploadFee(String)</a></td><td><div class="summary">
            Pay texture/animation upload fee
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_PointAtEffect.htm">PointAtEffect(LLUUID, LLUUID, LLVector3d, PointAtType, LLUUID)</a></td><td><div class="summary">
            Start a particle stream between an agent and an object
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_RelativePosition.htm">RelativePosition</a></td><td><div class="summary">Current position of the agent as a relative offset from
            the simulator, or the parent object if we are sitting on something</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_RelativeRotation.htm">RelativeRotation</a></td><td><div class="summary">Current rotation of the agent as a relative rotation from
            the simulator, or the parent object if we are sitting on something</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_ReplyToScriptDialog.htm">ReplyToScriptDialog(Int32, Int32, String, LLUUID)</a></td><td><div class="summary">
            Reply to script dialog questions. 
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestBalance.htm">RequestBalance<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Request the current L$ balance
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestJoinGroupChat.htm">RequestJoinGroupChat(LLUUID)</a></td><td><div class="summary">
            Send a request to join a group chat session
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestLeaveGroupChat.htm">RequestLeaveGroupChat(LLUUID)</a></td><td><div class="summary">
            Request self terminates group chat. This will stop Group IM's from showing up
            until session is rejoined or expires.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestMuteList.htm">RequestMuteList<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Request the list of muted objects and avatars for this agent
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestScriptSensor.htm">RequestScriptSensor(String, LLUUID, AgentManager<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>ScriptSensorTypeFlags, Single, Single, LLUUID, Simulator)</a></td><td><div class="summary">
            Requests script detection of objects and avatars
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestSit.htm">RequestSit(LLUUID, LLVector3)</a></td><td><div class="summary">
            Sends a request to sit on the specified object
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestTeleport_1.htm">RequestTeleport(UInt64, LLVector3)</a></td><td><div class="summary">
            Request teleport to a another simulator
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestTeleport_2.htm">RequestTeleport(UInt64, LLVector3, LLVector3)</a></td><td><div class="summary">
            Request teleport to a another simulator
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RequestTeleport.htm">RequestTeleport(LLUUID)</a></td><td><div class="summary">
            Teleport agent to a landmark
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_RetrieveInstantMessages.htm">RetrieveInstantMessages<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Requests missed/offline messages</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_ScriptQuestionReply.htm">ScriptQuestionReply(Simulator, LLUUID, LLUUID, ScriptPermission)</a></td><td><div class="summary">
            Reply to script permissions request
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_SecureSessionID.htm">SecureSessionID</a></td><td><div class="summary">Shared secret <span class="nolink">LLUUID</span> that is never sent over the wire</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_SendTeleportLure.htm">SendTeleportLure(LLUUID)</a></td><td><div class="summary">
            Send a teleport lure to another avatar with default "Join me in ..." invitation message
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_SendTeleportLure_1.htm">SendTeleportLure(LLUUID, String)</a></td><td><div class="summary">
            Send a teleport lure to another avatar with custom invitation message
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_SessionID.htm">SessionID</a></td><td><div class="summary">Temporary <a href="T_OpenMetaverse_LLUUID.htm">LLUUID</a> assigned to this session, used for 
            verifying our identity in packets</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_SetHeightWidth.htm">SetHeightWidth(UInt16, UInt16)</a></td><td><div class="summary">
            Set the height and the width of the client window. This is used
            by the server to build a virtual camera frustum for our avatar
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_SetHome.htm">SetHome<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Sets home location to agents current position
            </div><br /></td></tr><tr data="field; public; instance; declared"><td><img src="../icons/pubfield.gif" /></td><td><a href="F_OpenMetaverse_AgentManager_SignaledAnimations.htm">SignaledAnimations</a></td><td><div class="summary">Currently playing animations for the agent. Can be used to
            check the current movement status such as walking, hovering, aiming,
            etc. by checking for system animations in the <div class="code"><pre>Animations</pre></div>
            class</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_SimPosition.htm">SimPosition</a></td><td><div class="summary">Current position of the agent in the simulator</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_SimRotation.htm">SimRotation</a></td><td><div class="summary">
            A <a href="T_OpenMetaverse_LLQuaternion.htm">LLQuaternion</a> representing the agents current rotation
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Sit.htm">Sit<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Follows a call to RequestSit() to actually sit on the object
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_SitOnGround.htm">SitOnGround<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Does a "ground sit" at the avatar's current position
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_SittingOn.htm">SittingOn</a></td><td><div class="summary">Gets the local ID of the prim the agent is sitting on,
            zero if the avatar is not currently sitting</div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Stand.htm">Stand<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Stands up from sitting on a prim or the ground</div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_StartLocation.htm">StartLocation</a></td><td><div class="summary">Where the avatar started at login. Can be "last", "home" 
            or a login <span class="nolink">URI</span></div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Teleport.htm">Teleport(LLUUID)</a></td><td><div class="summary">
            Teleport agent to a landmark
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Teleport_1.htm">Teleport(String, LLVector3)</a></td><td><div class="summary">
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Teleport_2.htm">Teleport(String, LLVector3, LLVector3)</a></td><td><div class="summary">
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Teleport_3.htm">Teleport(UInt64, LLVector3)</a></td><td><div class="summary">
            Teleport agent to another region
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Teleport_4.htm">Teleport(UInt64, LLVector3, LLVector3)</a></td><td><div class="summary">
            Teleport agent to another region
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_TeleportLureRespond.htm">TeleportLureRespond(LLUUID, Boolean)</a></td><td><div class="summary">
            Respond to a teleport lure by either accepting it and initiating 
            the teleport, or denying it
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_TeleportMessage.htm">TeleportMessage</a></td><td><div class="summary">Current status message for teleporting</div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/7bxwbwt2" target="_blank">ToString<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Returns a <a href="http://msdn2.microsoft.com/en-us/s1wwdcbf" target="_blank">String</a> that represents the current <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_Touch.htm">Touch(UInt32)</a></td><td><div class="summary">
            Touches an object
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_UpdateInterests.htm">UpdateInterests(Avatar<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Interests)</a></td><td><div class="summary">
            Update agents profile interests
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="M_OpenMetaverse_AgentManager_UpdateProfile.htm">UpdateProfile(Avatar<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>AvatarProperties)</a></td><td><div class="summary">
            Update agent profile
            </div><br /></td></tr><tr data="property; public; instance; declared"><td><img src="../icons/pubproperty.gif" /></td><td><a href="P_OpenMetaverse_AgentManager_Velocity.htm">Velocity</a></td><td><div class="summary">An <a href="T_OpenMetaverse_LLVector3.htm">LLVector3</a> representing the velocity of our agent</div><br /></td></tr></table><script type="text/javascript">
					var mt = new ElementCollection('memberTabs');
					var ms = new ElementCollection('memberList');
					var mf = new MemberFilter();
					mt.toggleClass('value','all','activeTab','tab');
				</script></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Inheritance Hierarchy</div><div class="sectionContent"><table cellspacing="0" cellpadding="0"><tr><td colspan="2"><a href="http://msdn2.microsoft.com/en-us/e5kfa45b" target="_blank">Object</a></td></tr><tr><td><img src="../icons/LastChild.gif" /></td><td><span class="selflink">AgentManager</span></td></tr></table></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:contact%40libsecondlife.org?Subject=OpenMetaverse Library API Documentation">The OpenMetaverse Ninjas</a>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> <p /><a href="http://www.libsecondlife.org/wiki/libsecondlife:License">License</a></div>Assembly: <span data="assembly">OpenMetaverse</span> (Module: OpenMetaverse) Version: 1.0.0.0</p></div></body></html>